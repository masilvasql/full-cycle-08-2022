import { Button, Card, CardActions, CardContent, CardHeader, CardMedia, Typography } from '@material-ui/core'
import axios from 'axios'
import type { GetStaticPaths, GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import http from '../../http'
import { Product } from '../../model'

interface ProductDetailPageProps {
    product: Product
}

const ProductDetailPage: NextPage<ProductDetailPageProps> = ({product}) => {
    return (
        <div>
            <Head>
                <title>{product.name}Detalhes do produto</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Card>
                <CardHeader
                    title={product.name.toUpperCase()}
                    subheader ={`R$${product.price}`}
                />
                <CardActions>
                    <Button  size='small' color="primary" component="a" >Comprar</Button>
                </CardActions>
                <CardMedia style={{paddingTop:"56%"}} image={product.image_url}/>
                <CardContent>
              <Typography component="p" variant='body2' color='textSecondary' >
                {product.description}
              </Typography>
            </CardContent>
            </Card>

        </div>
    )
}

export default ProductDetailPage

export const getStaticProps:GetStaticProps<ProductDetailPageProps, {slug:string}> = async (context) => {
    const {slug} = context.params!;
    try{
        const {data: product} = await http.get(`products/${slug}`)
        return{
            props:{
                product 
            },
            revalidate:1*60*2
        }
    }catch(error){
        if(axios.isAxiosError(error) && error.response?.status === 404){
            return{
                notFound:true
            }
        }
        throw error
    }
   
}

export const getStaticPaths: GetStaticPaths = async (context) => {
    const {data: product} = await http.get(`products`)
    const paths =  product.map((product:Product) => ({
        params: {
            slug: product.slug
        }
    }))
    return{paths, fallback: 'blocking'}
    //false => não vai ter nova informação ou se tiver eu vou rodar o build
    //true => podem ter novas informações e quando tiver é pra ele gerar de forma estática em tempo de execução
    //blocking => pode ter novas informações e quando tiver é pra ele gerar de forma estática em tempo de build
} 